var rulerTool = {
    isActive: false,
    markers: [],
    tempMarkers: null,
    polyline: null,
    totalDistance: 0
};

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ª–∏–Ω–µ–π–∫–∏
document.getElementById('rulerButton').addEventListener('click', function(e) {
    e.stopPropagation();

    if (rulerTool.isActive) {
        disableRulerTool();
        this.classList.remove('active');
        document.getElementById('ZoneBtn').classList.remove('active');

    } else {
        enableRulerTool();
        this.classList.add('active');
        document.getElementById('ZoneBtn').classList.add('active');
    }
});

function enableRulerTool() {
    // –°–±—Ä–æ—Å –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    if (rulerTool.isActive) disableRulerTool();

    rulerTool.isActive = true;
    rulerTool.markers = [];
    rulerTool.tempMarkers = null;
    rulerTool.polyline = null;
    rulerTool.totalDistance = 0;

    // –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫—É—Ä—Å–æ—Ä–∞
    map.getContainer().style.cursor = 'crosshair';

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    map.on('click', addRulerPoint);
    map.on('dblclick', removeLastRulerPoint);
}

function disableRulerTool() {
    if (!rulerTool.isActive) return;

    // –û—á–∏—Å—Ç–∫–∞
    clearRuler();

    // –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—É—Ä—Å–æ—Ä–∞
    map.getContainer().style.cursor = '';

    // –£–¥–∞–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    map.off('click', addRulerPoint);
    map.off('dblclick', removeLastRulerPoint);

    rulerTool.isActive = false;
}

function addRulerPoint(e) {
    // –°–æ–∑–¥–∞–Ω–∏–µ –º–∞—Ä–∫–µ—Ä–∞
    var marker = L.marker(e.latlng, {
        icon: L.divIcon({
            className: 'ruler-marker',
            html: '<div class="ruler-marker-inner"></div>',
            iconSize: [16, 16]
        }),
        draggable: true
    }).addTo(map);

    marker.on('drag', function() {
        updateRulerLine();
        updateDistance();
        updateAlltooltips();
    })

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –º–∞—Å—Å–∏–≤
    rulerTool.markers.push(marker);

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ª–∏–Ω–∏–∏ –∏ —Ä–∞—Å—á–µ—Ç —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è
    updateRulerLine();
    updateDistance();

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç—É–ª—Ç–∏–ø–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    addTooltipToMarker(marker);
}

function removeLastRulerPoint() {
    if (rulerTool.markers.length === 0) return;

    // –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –º–∞—Ä–∫–µ—Ä–∞
    var lastMarker = rulerTool.markers.pop();
    map.removeLayer(lastMarker);

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ª–∏–Ω–∏–∏ –∏ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è
    updateRulerLine();
    updateDistance();

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç—É–ª—Ç–∏–ø–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –º–∞—Ä–∫–µ—Ä–∞
    if (rulerTool.markers.length > 0) {
        addTooltipToMarker(rulerTool.markers[rulerTool.markers.length - 1]);
    }
}

function updateRulerLine() {
    var latlngs = rulerTool.markers.map(m => m.getLatLng());

    if (latlngs.length >= 2) {
        if (!rulerTool.polyline) {
            rulerTool.polyline = L.polyline(latlngs, {
                color: '#4CAF50',
                weight: 3,
                dashArray: '5, 5'
            }).addTo(map);
        } else {
            rulerTool.polyline.setLatLngs(latlngs);
        }
    } else if (rulerTool.polyline) {
        map.removeLayer(rulerTool.polyline);
        rulerTool.polyline = null;
    }
}

function updateDistance() {
    rulerTool.totalDistance = 0;

    if (rulerTool.markers.length < 2) return;

    for (var i = 1; i < rulerTool.markers.length; i++) {
        var prev = rulerTool.markers[i - 1].getLatLng();
        var curr = rulerTool.markers[i].getLatLng();
        rulerTool.totalDistance += prev.distanceTo(curr);
    }
}

function updateAlltooltips() {
    rulerTool.markers.forEach(marker => {
        marker.unbindTooltip();
        addTooltipToMarker(marker);
    })
}

// –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç—É–ª—Ç–∏–ø–∞
function addTooltipToMarker(marker) {
    var isLast = marker === rulerTool.markers[rulerTool.markers.length - 1];
    var index = rulerTool.markers.indexOf(marker);

    // –†–∞—Å—á–µ—Ç —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è
    var segmentDistance = 0;
    if (index > 0) {
        var prev = rulerTool.markers[index - 1].getLatLng();
        segmentDistance = prev.distanceTo(marker.getLatLng());
    }

    // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è
    var formatDist = function(d) {
        return d >= 1000 ? (d / 1000).toFixed(2) + ' –∫–º' : Math.round(d) + ' –º';
    };

    // HTML —Ç—É–ª—Ç–∏–ø–∞
    var tooltipHTML = `
        <div class="ruler-tooltip">
            <div>–°–µ–≥–º–µ–Ω—Ç: ${formatDist(segmentDistance)}</div>
            <div>–í—Å–µ–≥–æ: ${formatDist(rulerTool.totalDistance)}</div>
            ${isLast ? `
            <div class="ruler-controls">
                <button class="ruler-delete-all">üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –≤—Å–µ</button>
            </div>
            ` : ''}
        </div>
    `;

    // —É–¥–∞–ª–∏–ª –≤–æ—Ç —ç—Ç—É —Å—Ç—Ä–æ–∫—É, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∞ –≤—Å—ë –ª–æ–º–∞–ª–∞ "<button class="ruler-finish">‚úì –ì–æ—Ç–æ–≤–æ</button>"
    
    // –ü—Ä–∏–≤—è–∑–∫–∞ —Ç—É–ª—Ç–∏–ø–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
    marker.bindTooltip(tooltipHTML, {
        permanent: true,
        direction: 'right',
        offset: [15, 0],
        className: 'ruler-tooltip-container',
        interactive: true // –≠—Ç–æ –∫–ª—é—á–µ–≤–æ–π –ø–∞—Ä–∞–º–µ—Ç—Ä!
    }).openTooltip();
    
    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è –∫–Ω–æ–ø–æ–∫
    if (isLast) {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        marker._tooltip._contentNode.addEventListener('click', function(e) {
            if (e.target.classList.contains('ruler-delete-all')) {
                e.stopPropagation();
                clearRuler();
            } else if (e.target.classList.contains('ruler-finish')) {
                e.stopPropagation();
                disableRulerTool();
            }
        });
    }
}

function clearRuler() {
    // –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –º–∞—Ä–∫–µ—Ä–æ–≤
    rulerTool.markers.forEach(m => map.removeLayer(m));
    rulerTool.markers = [];
    
    // –£–¥–∞–ª–µ–Ω–∏–µ –ª–∏–Ω–∏–∏
    if (rulerTool.polyline) {
        map.removeLayer(rulerTool.polyline);
        rulerTool.polyline = null;
    }
    
    // –°–±—Ä–æ—Å —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è
    rulerTool.totalDistance = 0;
}